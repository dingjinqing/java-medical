/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables;


import com.vpu.mp.db.shop.Indexes;
import com.vpu.mp.db.shop.Keys;
import com.vpu.mp.db.shop.MiniShop_1;
import com.vpu.mp.db.shop.tables.records.AssessTopicRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssessTopic extends TableImpl<AssessTopicRecord> {

    private static final long serialVersionUID = 1558086503;

    /**
     * The reference instance of <code>mini_shop_1.b2c_assess_topic</code>
     */
    public static final AssessTopic ASSESS_TOPIC = new AssessTopic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssessTopicRecord> getRecordType() {
        return AssessTopicRecord.class;
    }

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.id</code>.
     */
    public final TableField<AssessTopicRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.shop_id</code>. 店铺ID
     */
    public final TableField<AssessTopicRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "店铺ID");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.assess_id</code>. 测评活动ID
     */
    public final TableField<AssessTopicRecord, Integer> ASSESS_ID = createField("assess_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评活动ID");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.topic_type</code>. 题目格式：0文本，1图片，2视频
     */
    public final TableField<AssessTopicRecord, Byte> TOPIC_TYPE = createField("topic_type", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "题目格式：0文本，1图片，2视频");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.topic_title</code>. 题目标题
     */
    public final TableField<AssessTopicRecord, String> TOPIC_TITLE = createField("topic_title", org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "题目标题");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.topic_level</code>. 题目优先级，越小优先级越大，从1开始
     */
    public final TableField<AssessTopicRecord, Byte> TOPIC_LEVEL = createField("topic_level", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "题目优先级，越小优先级越大，从1开始");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.bg_img_type</code>. 题目背景类型：0默认，1自定义
     */
    public final TableField<AssessTopicRecord, Byte> BG_IMG_TYPE = createField("bg_img_type", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "题目背景类型：0默认，1自定义");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.img_path</code>. 题目背景图片路径或者题目图片、视频路径
     */
    public final TableField<AssessTopicRecord, String> IMG_PATH = createField("img_path", org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "题目背景图片路径或者题目图片、视频路径");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.option_type</code>. 选项类型：0单选，1多选
     */
    public final TableField<AssessTopicRecord, Byte> OPTION_TYPE = createField("option_type", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "选项类型：0单选，1多选");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.option_content</code>. 选项内容，json串，包括选项描述、图片和跳转逻辑或者分值
     */
    public final TableField<AssessTopicRecord, String> OPTION_CONTENT = createField("option_content", org.jooq.impl.SQLDataType.CLOB, this, "选项内容，json串，包括选项描述、图片和跳转逻辑或者分值");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.result_id</code>. 对应ID
     */
    public final TableField<AssessTopicRecord, Integer> RESULT_ID = createField("result_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "对应ID");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.in_time</code>. 添加时间
     */
    public final TableField<AssessTopicRecord, Timestamp> IN_TIME = createField("in_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "添加时间");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.up_time</code>. 更新时间
     */
    public final TableField<AssessTopicRecord, Timestamp> UP_TIME = createField("up_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "更新时间");

    /**
     * The column <code>mini_shop_1.b2c_assess_topic.del_flag</code>. 删除标识：0未删除，1已删除
     */
    public final TableField<AssessTopicRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "删除标识：0未删除，1已删除");

    /**
     * Create a <code>mini_shop_1.b2c_assess_topic</code> table reference
     */
    public AssessTopic() {
        this(DSL.name("b2c_assess_topic"), null);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_assess_topic</code> table reference
     */
    public AssessTopic(String alias) {
        this(DSL.name(alias), ASSESS_TOPIC);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_assess_topic</code> table reference
     */
    public AssessTopic(Name alias) {
        this(alias, ASSESS_TOPIC);
    }

    private AssessTopic(Name alias, Table<AssessTopicRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssessTopic(Name alias, Table<AssessTopicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AssessTopic(Table<O> child, ForeignKey<O, AssessTopicRecord> key) {
        super(child, key, ASSESS_TOPIC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_1.MINI_SHOP_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSESS_TOPIC_ASSESS_ID, Indexes.ASSESS_TOPIC_PRIMARY, Indexes.ASSESS_TOPIC_SHOP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssessTopicRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_ASSESS_TOPIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssessTopicRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ASSESS_TOPIC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssessTopicRecord>> getKeys() {
        return Arrays.<UniqueKey<AssessTopicRecord>>asList(Keys.KEY_B2C_ASSESS_TOPIC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessTopic as(String alias) {
        return new AssessTopic(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessTopic as(Name alias) {
        return new AssessTopic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessTopic rename(String name) {
        return new AssessTopic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessTopic rename(Name name) {
        return new AssessTopic(name, null);
    }
}
