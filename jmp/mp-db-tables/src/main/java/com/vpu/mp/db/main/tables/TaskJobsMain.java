/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.TaskJobsMainRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskJobsMain extends TableImpl<TaskJobsMainRecord> {

    private static final long serialVersionUID = 1414077934;

    /**
     * The reference instance of <code>mini_main.b2c_task_jobs_main</code>
     */
    public static final TaskJobsMain TASK_JOBS_MAIN = new TaskJobsMain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskJobsMainRecord> getRecordType() {
        return TaskJobsMainRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_task_jobs_main.ID</code>.
     */
    public final TableField<TaskJobsMainRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.SHOP_ID</code>. 店铺ID
     */
    public final TableField<TaskJobsMainRecord, Integer> SHOP_ID = createField("SHOP_ID", org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "店铺ID");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.CONTENT_ID</code>. MQ消息内容ID
     */
    public final TableField<TaskJobsMainRecord, Integer> CONTENT_ID = createField("CONTENT_ID", org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "MQ消息内容ID");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.STATUS</code>. 任务状态：0待执行,1执行中,2已完成
     */
    public final TableField<TaskJobsMainRecord, Byte> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "任务状态：0待执行,1执行中,2已完成");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.SCHEDULE</code>. 任务进度：0-100
     */
    public final TableField<TaskJobsMainRecord, Byte> SCHEDULE = createField("SCHEDULE", org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "任务进度：0-100");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.EXECUTION_TYPE</code>. 执行类型：0单次(不保证全部执行成功)1周期内循环执行2定时执行
     */
    public final TableField<TaskJobsMainRecord, Byte> EXECUTION_TYPE = createField("EXECUTION_TYPE", org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "执行类型：0单次(不保证全部执行成功)1周期内循环执行2定时执行");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.CYCLE</code>. 轮循间隔(单位:秒)
     */
    public final TableField<TaskJobsMainRecord, Integer> CYCLE = createField("CYCLE", org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "轮循间隔(单位:秒)");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.TYPE</code>. task任务类型(任务标识)
     */
    public final TableField<TaskJobsMainRecord, Byte> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "task任务类型(任务标识)");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.CREATE_TIME</code>.
     */
    public final TableField<TaskJobsMainRecord, Timestamp> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.UPDATE_TIME</code>. 最后修改时间
     */
    public final TableField<TaskJobsMainRecord, Timestamp> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * The column <code>mini_main.b2c_task_jobs_main.DEL_FLAG</code>. 删除标识：0未删除，1已删除
     */
    public final TableField<TaskJobsMainRecord, Byte> DEL_FLAG = createField("DEL_FLAG", org.jooq.impl.SQLDataType.TINYINT.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "删除标识：0未删除，1已删除");

    /**
     * Create a <code>mini_main.b2c_task_jobs_main</code> table reference
     */
    public TaskJobsMain() {
        this(DSL.name("b2c_task_jobs_main"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_task_jobs_main</code> table reference
     */
    public TaskJobsMain(String alias) {
        this(DSL.name(alias), TASK_JOBS_MAIN);
    }

    /**
     * Create an aliased <code>mini_main.b2c_task_jobs_main</code> table reference
     */
    public TaskJobsMain(Name alias) {
        this(alias, TASK_JOBS_MAIN);
    }

    private TaskJobsMain(Name alias, Table<TaskJobsMainRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskJobsMain(Name alias, Table<TaskJobsMainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TaskJobsMain(Table<O> child, ForeignKey<O, TaskJobsMainRecord> key) {
        super(child, key, TASK_JOBS_MAIN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_JOBS_MAIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TaskJobsMainRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASK_JOBS_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskJobsMainRecord> getPrimaryKey() {
        return Keys.KEY_B2C_TASK_JOBS_MAIN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskJobsMainRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskJobsMainRecord>>asList(Keys.KEY_B2C_TASK_JOBS_MAIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskJobsMain as(String alias) {
        return new TaskJobsMain(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskJobsMain as(Name alias) {
        return new TaskJobsMain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskJobsMain rename(String name) {
        return new TaskJobsMain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskJobsMain rename(Name name) {
        return new TaskJobsMain(name, null);
    }
}
