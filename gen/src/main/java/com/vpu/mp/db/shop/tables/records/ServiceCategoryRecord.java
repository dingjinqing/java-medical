/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables.records;


import com.vpu.mp.db.shop.tables.ServiceCategory;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceCategoryRecord extends UpdatableRecordImpl<ServiceCategoryRecord> implements Record4<UShort, String, Integer, Timestamp> {

    private static final long serialVersionUID = -466588758;

    /**
     * Setter for <code>mini_shop_1.b2c_service_category.cat_id</code>.
     */
    public void setCatId(UShort value) {
        set(0, value);
    }

    /**
     * Getter for <code>mini_shop_1.b2c_service_category.cat_id</code>.
     */
    public UShort getCatId() {
        return (UShort) get(0);
    }

    /**
     * Setter for <code>mini_shop_1.b2c_service_category.cat_name</code>.
     */
    public void setCatName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mini_shop_1.b2c_service_category.cat_name</code>.
     */
    public String getCatName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mini_shop_1.b2c_service_category.store_id</code>.
     */
    public void setStoreId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>mini_shop_1.b2c_service_category.store_id</code>.
     */
    public Integer getStoreId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>mini_shop_1.b2c_service_category.create_time</code>.
     */
    public void setCreateTime(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>mini_shop_1.b2c_service_category.create_time</code>.
     */
    public Timestamp getCreateTime() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UShort> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UShort, String, Integer, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UShort, String, Integer, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UShort> field1() {
        return ServiceCategory.SERVICE_CATEGORY.CAT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return ServiceCategory.SERVICE_CATEGORY.CAT_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return ServiceCategory.SERVICE_CATEGORY.STORE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return ServiceCategory.SERVICE_CATEGORY.CREATE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort component1() {
        return getCatId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getCatName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getStoreId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component4() {
        return getCreateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort value1() {
        return getCatId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCatName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getStoreId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getCreateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceCategoryRecord value1(UShort value) {
        setCatId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceCategoryRecord value2(String value) {
        setCatName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceCategoryRecord value3(Integer value) {
        setStoreId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceCategoryRecord value4(Timestamp value) {
        setCreateTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceCategoryRecord values(UShort value1, String value2, Integer value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServiceCategoryRecord
     */
    public ServiceCategoryRecord() {
        super(ServiceCategory.SERVICE_CATEGORY);
    }

    /**
     * Create a detached, initialised ServiceCategoryRecord
     */
    public ServiceCategoryRecord(UShort catId, String catName, Integer storeId, Timestamp createTime) {
        super(ServiceCategory.SERVICE_CATEGORY);

        set(0, catId);
        set(1, catName);
        set(2, storeId);
        set(3, createTime);
    }
}
