/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables;


import com.vpu.mp.db.shop.Indexes;
import com.vpu.mp.db.shop.Keys;
import com.vpu.mp.db.shop.MiniShop_1;
import com.vpu.mp.db.shop.tables.records.OrderVerifierRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderVerifier extends TableImpl<OrderVerifierRecord> {

    private static final long serialVersionUID = 1807277273;

    /**
     * The reference instance of <code>mini_shop_1.b2c_order_verifier</code>
     */
    public static final OrderVerifier ORDER_VERIFIER = new OrderVerifier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderVerifierRecord> getRecordType() {
        return OrderVerifierRecord.class;
    }

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.id</code>.
     */
    public final TableField<OrderVerifierRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.store_id</code>. 门店ID
     */
    public final TableField<OrderVerifierRecord, UInteger> STORE_ID = createField("store_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "门店ID");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.user_id</code>. 用户ID
     */
    public final TableField<OrderVerifierRecord, UInteger> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "用户ID");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.verify_orders</code>. 核销订单数
     */
    public final TableField<OrderVerifierRecord, Integer> VERIFY_ORDERS = createField("verify_orders", org.jooq.impl.SQLDataType.INTEGER, this, "核销订单数");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.del_flag</code>. 删除
     */
    public final TableField<OrderVerifierRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "删除");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.add_time</code>. 添加时间
     */
    public final TableField<OrderVerifierRecord, Timestamp> ADD_TIME = createField("add_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "添加时间");

    /**
     * The column <code>mini_shop_1.b2c_order_verifier.update_time</code>. 更新时间
     */
    public final TableField<OrderVerifierRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>mini_shop_1.b2c_order_verifier</code> table reference
     */
    public OrderVerifier() {
        this(DSL.name("b2c_order_verifier"), null);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_order_verifier</code> table reference
     */
    public OrderVerifier(String alias) {
        this(DSL.name(alias), ORDER_VERIFIER);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_order_verifier</code> table reference
     */
    public OrderVerifier(Name alias) {
        this(alias, ORDER_VERIFIER);
    }

    private OrderVerifier(Name alias, Table<OrderVerifierRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderVerifier(Name alias, Table<OrderVerifierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderVerifier(Table<O> child, ForeignKey<O, OrderVerifierRecord> key) {
        super(child, key, ORDER_VERIFIER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_1.MINI_SHOP_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_VERIFIER_PRIMARY, Indexes.ORDER_VERIFIER_STORE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderVerifierRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_ORDER_VERIFIER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderVerifierRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ORDER_VERIFIER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderVerifierRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderVerifierRecord>>asList(Keys.KEY_B2C_ORDER_VERIFIER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderVerifier as(String alias) {
        return new OrderVerifier(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderVerifier as(Name alias) {
        return new OrderVerifier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderVerifier rename(String name) {
        return new OrderVerifier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderVerifier rename(Name name) {
        return new OrderVerifier(name, null);
    }
}
