/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables;


import com.vpu.mp.db.shop.Indexes;
import com.vpu.mp.db.shop.Keys;
import com.vpu.mp.db.shop.MiniShop_1;
import com.vpu.mp.db.shop.tables.records.ProductBrandRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductBrand extends TableImpl<ProductBrandRecord> {

    private static final long serialVersionUID = -902234432;

    /**
     * The reference instance of <code>mini_shop_1.b2c_product_brand</code>
     */
    public static final ProductBrand PRODUCT_BRAND = new ProductBrand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductBrandRecord> getRecordType() {
        return ProductBrandRecord.class;
    }

    /**
     * The column <code>mini_shop_1.b2c_product_brand.id</code>.
     */
    public final TableField<ProductBrandRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.brand_name</code>. 品牌名称
     */
    public final TableField<ProductBrandRecord, String> BRAND_NAME = createField("brand_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "品牌名称");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.e_name</code>. 品牌英文名称
     */
    public final TableField<ProductBrandRecord, String> E_NAME = createField("e_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "品牌英文名称");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.logo</code>. 品牌Logo
     */
    public final TableField<ProductBrandRecord, String> LOGO = createField("logo", org.jooq.impl.SQLDataType.VARCHAR(191), this, "品牌Logo");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.first</code>. 优先级
     */
    public final TableField<ProductBrandRecord, Byte> FIRST = createField("first", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "优先级");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.in_time</code>.
     */
    public final TableField<ProductBrandRecord, Timestamp> IN_TIME = createField("in_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.up_time</code>.
     */
    public final TableField<ProductBrandRecord, Timestamp> UP_TIME = createField("up_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.is_del</code>. 0为未删除 1为删除
     */
    public final TableField<ProductBrandRecord, Byte> IS_DEL = createField("is_del", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0为未删除 1为删除");

    /**
     * The column <code>mini_shop_1.b2c_product_brand.desc</code>. 品牌介绍
     */
    public final TableField<ProductBrandRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.CLOB, this, "品牌介绍");

    /**
     * Create a <code>mini_shop_1.b2c_product_brand</code> table reference
     */
    public ProductBrand() {
        this(DSL.name("b2c_product_brand"), null);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_product_brand</code> table reference
     */
    public ProductBrand(String alias) {
        this(DSL.name(alias), PRODUCT_BRAND);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_product_brand</code> table reference
     */
    public ProductBrand(Name alias) {
        this(alias, PRODUCT_BRAND);
    }

    private ProductBrand(Name alias, Table<ProductBrandRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductBrand(Name alias, Table<ProductBrandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductBrand(Table<O> child, ForeignKey<O, ProductBrandRecord> key) {
        super(child, key, PRODUCT_BRAND);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_1.MINI_SHOP_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_BRAND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductBrandRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCT_BRAND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductBrandRecord> getPrimaryKey() {
        return Keys.KEY_B2C_PRODUCT_BRAND_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductBrandRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductBrandRecord>>asList(Keys.KEY_B2C_PRODUCT_BRAND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductBrand as(String alias) {
        return new ProductBrand(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductBrand as(Name alias) {
        return new ProductBrand(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductBrand rename(String name) {
        return new ProductBrand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductBrand rename(Name name) {
        return new ProductBrand(name, null);
    }
}
