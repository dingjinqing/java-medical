/*
 * This file is generated by jOOQ.
 */
package com.vpu.jmd.table.main.tables;



import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.vpu.jmd.table.main.Indexes;
import com.vpu.jmd.table.main.Keys;
import com.vpu.jmd.table.main.MiniMain;
import com.vpu.jmd.table.main.tables.records.SystemRoleRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemRole extends TableImpl<SystemRoleRecord> {

    private static final long serialVersionUID = 257855921;

    /**
     * The reference instance of <code>mini_main.b2c_system_role</code>
     */
    public static final SystemRole SYSTEM_ROLE = new SystemRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemRoleRecord> getRecordType() {
        return SystemRoleRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_system_role.role_id</code>.
     */
    public final TableField<SystemRoleRecord, Integer> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_system_role.system_user_id</code>. 骞冲彴璐﹀彿ID
     */
    public final TableField<SystemRoleRecord, Integer> SYSTEM_USER_ID = createField("system_user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "骞冲彴璐﹀彿ID");

    /**
     * The column <code>mini_main.b2c_system_role.role_name</code>. 瑙掕壊鍚嶇О
     */
    public final TableField<SystemRoleRecord, String> ROLE_NAME = createField("role_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "瑙掕壊鍚嶇О");

    /**
     * The column <code>mini_main.b2c_system_role.privilege_list</code>. 鏉冮檺鍒楄〃锛宩son鏁扮粍瀛樺偍
     */
    public final TableField<SystemRoleRecord, String> PRIVILEGE_LIST = createField("privilege_list", org.jooq.impl.SQLDataType.CLOB, this, "鏉冮檺鍒楄〃锛宩son鏁扮粍瀛樺偍");

    /**
     * The column <code>mini_main.b2c_system_role.create_time</code>.
     */
    public final TableField<SystemRoleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_main.b2c_system_role.del_time</code>. 删除时间
     */
    public final TableField<SystemRoleRecord, Timestamp> DEL_TIME = createField("del_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "删除时间");

    /**
     * The column <code>mini_main.b2c_system_role.del_flag</code>. 0:未删除，1:已删除
     */
    public final TableField<SystemRoleRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:未删除，1:已删除");

    /**
     * Create a <code>mini_main.b2c_system_role</code> table reference
     */
    public SystemRole() {
        this(DSL.name("b2c_system_role"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_system_role</code> table reference
     */
    public SystemRole(String alias) {
        this(DSL.name(alias), SYSTEM_ROLE);
    }

    /**
     * Create an aliased <code>mini_main.b2c_system_role</code> table reference
     */
    public SystemRole(Name alias) {
        this(alias, SYSTEM_ROLE);
    }

    private SystemRole(Name alias, Table<SystemRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemRole(Name alias, Table<SystemRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SystemRole(Table<O> child, ForeignKey<O, SystemRoleRecord> key) {
        super(child, key, SYSTEM_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYSTEM_ROLE_PRIMARY, Indexes.SYSTEM_ROLE_SYSTEM_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SystemRoleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SYSTEM_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SystemRoleRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SYSTEM_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SystemRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemRoleRecord>>asList(Keys.KEY_B2C_SYSTEM_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SystemRole as(String alias) {
        return new SystemRole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SystemRole as(Name alias) {
        return new SystemRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemRole rename(String name) {
        return new SystemRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemRole rename(Name name) {
        return new SystemRole(name, null);
    }
}
