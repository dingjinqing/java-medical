/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cCacheRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cCache extends TableImpl<B2cCacheRecord> {

    private static final long serialVersionUID = 1522626741;

    /**
     * The reference instance of <code>mini_main.b2c_cache</code>
     */
    public static final B2cCache B2C_CACHE = new B2cCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cCacheRecord> getRecordType() {
        return B2cCacheRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_cache.id</code>.
     */
    public final TableField<B2cCacheRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_cache.k</code>.
     */
    public final TableField<B2cCacheRecord, String> K = createField("k", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_cache.v</code>.
     */
    public final TableField<B2cCacheRecord, String> V = createField("v", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>mini_main.b2c_cache.created</code>.
     */
    public final TableField<B2cCacheRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>mini_main.b2c_cache</code> table reference
     */
    public B2cCache() {
        this(DSL.name("b2c_cache"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_cache</code> table reference
     */
    public B2cCache(String alias) {
        this(DSL.name(alias), B2C_CACHE);
    }

    /**
     * Create an aliased <code>mini_main.b2c_cache</code> table reference
     */
    public B2cCache(Name alias) {
        this(alias, B2C_CACHE);
    }

    private B2cCache(Name alias, Table<B2cCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cCache(Name alias, Table<B2cCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cCache(Table<O> child, ForeignKey<O, B2cCacheRecord> key) {
        super(child, key, B2C_CACHE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_CACHE_K, Indexes.B2C_CACHE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cCacheRecord, Integer> getIdentity() {
        return Keys.IDENTITY_B2C_CACHE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cCacheRecord> getPrimaryKey() {
        return Keys.KEY_B2C_CACHE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cCacheRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cCacheRecord>>asList(Keys.KEY_B2C_CACHE_PRIMARY, Keys.KEY_B2C_CACHE_K);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cCache as(String alias) {
        return new B2cCache(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cCache as(Name alias) {
        return new B2cCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cCache rename(String name) {
        return new B2cCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cCache rename(Name name) {
        return new B2cCache(name, null);
    }
}
