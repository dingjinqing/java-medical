/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cFailedJobsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cFailedJobs extends TableImpl<B2cFailedJobsRecord> {

    private static final long serialVersionUID = -423136760;

    /**
     * The reference instance of <code>mini_main.b2c_failed_jobs</code>
     */
    public static final B2cFailedJobs B2C_FAILED_JOBS = new B2cFailedJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cFailedJobsRecord> getRecordType() {
        return B2cFailedJobsRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_failed_jobs.id</code>.
     */
    public final TableField<B2cFailedJobsRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.connection</code>.
     */
    public final TableField<B2cFailedJobsRecord, String> CONNECTION = createField("connection", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.queue</code>.
     */
    public final TableField<B2cFailedJobsRecord, String> QUEUE = createField("queue", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.payload</code>.
     */
    public final TableField<B2cFailedJobsRecord, String> PAYLOAD = createField("payload", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.exception</code>.
     */
    public final TableField<B2cFailedJobsRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.failed_at</code>.
     */
    public final TableField<B2cFailedJobsRecord, Timestamp> FAILED_AT = createField("failed_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public B2cFailedJobs() {
        this(DSL.name("b2c_failed_jobs"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public B2cFailedJobs(String alias) {
        this(DSL.name(alias), B2C_FAILED_JOBS);
    }

    /**
     * Create an aliased <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public B2cFailedJobs(Name alias) {
        this(alias, B2C_FAILED_JOBS);
    }

    private B2cFailedJobs(Name alias, Table<B2cFailedJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cFailedJobs(Name alias, Table<B2cFailedJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cFailedJobs(Table<O> child, ForeignKey<O, B2cFailedJobsRecord> key) {
        super(child, key, B2C_FAILED_JOBS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_FAILED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cFailedJobsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_B2C_FAILED_JOBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cFailedJobsRecord> getPrimaryKey() {
        return Keys.KEY_B2C_FAILED_JOBS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cFailedJobsRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cFailedJobsRecord>>asList(Keys.KEY_B2C_FAILED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cFailedJobs as(String alias) {
        return new B2cFailedJobs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cFailedJobs as(Name alias) {
        return new B2cFailedJobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cFailedJobs rename(String name) {
        return new B2cFailedJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cFailedJobs rename(Name name) {
        return new B2cFailedJobs(name, null);
    }
}
