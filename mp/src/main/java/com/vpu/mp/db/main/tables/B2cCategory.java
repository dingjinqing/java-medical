/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cCategoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cCategory extends TableImpl<B2cCategoryRecord> {

    private static final long serialVersionUID = 389859349;

    /**
     * The reference instance of <code>mini_main.b2c_category</code>
     */
    public static final B2cCategory B2C_CATEGORY = new B2cCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cCategoryRecord> getRecordType() {
        return B2cCategoryRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_category.cat_id</code>.
     */
    public final TableField<B2cCategoryRecord, UShort> CAT_ID = createField("cat_id", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_category.cat_name</code>. 分类名称
     */
    public final TableField<B2cCategoryRecord, String> CAT_NAME = createField("cat_name", org.jooq.impl.SQLDataType.VARCHAR(90).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "分类名称");

    /**
     * The column <code>mini_main.b2c_category.keywords</code>. 关键词
     */
    public final TableField<B2cCategoryRecord, String> KEYWORDS = createField("keywords", org.jooq.impl.SQLDataType.VARCHAR(191).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "关键词");

    /**
     * The column <code>mini_main.b2c_category.cat_desc</code>. 分类描述
     */
    public final TableField<B2cCategoryRecord, String> CAT_DESC = createField("cat_desc", org.jooq.impl.SQLDataType.VARCHAR(191).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "分类描述");

    /**
     * The column <code>mini_main.b2c_category.parent_id</code>. 父ID
     */
    public final TableField<B2cCategoryRecord, UShort> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED)), this, "父ID");

    /**
     * The column <code>mini_main.b2c_category.level</code>. 层级
     */
    public final TableField<B2cCategoryRecord, Short> LEVEL = createField("level", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "层级");

    /**
     * The column <code>mini_main.b2c_category.has_child</code>. 是否是子节点
     */
    public final TableField<B2cCategoryRecord, Byte> HAS_CHILD = createField("has_child", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否是子节点");

    /**
     * The column <code>mini_main.b2c_category.create_time</code>. 添加时间
     */
    public final TableField<B2cCategoryRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "添加时间");

    /**
     * The column <code>mini_main.b2c_category.cat_img</code>. 分类图标
     */
    public final TableField<B2cCategoryRecord, String> CAT_IMG = createField("cat_img", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "分类图标");

    /**
     * The column <code>mini_main.b2c_category.first</code>. 优先级
     */
    public final TableField<B2cCategoryRecord, Short> FIRST = createField("first", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "优先级");

    /**
     * Create a <code>mini_main.b2c_category</code> table reference
     */
    public B2cCategory() {
        this(DSL.name("b2c_category"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_category</code> table reference
     */
    public B2cCategory(String alias) {
        this(DSL.name(alias), B2C_CATEGORY);
    }

    /**
     * Create an aliased <code>mini_main.b2c_category</code> table reference
     */
    public B2cCategory(Name alias) {
        this(alias, B2C_CATEGORY);
    }

    private B2cCategory(Name alias, Table<B2cCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cCategory(Name alias, Table<B2cCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cCategory(Table<O> child, ForeignKey<O, B2cCategoryRecord> key) {
        super(child, key, B2C_CATEGORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_CATEGORY_PARENT_ID, Indexes.B2C_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cCategoryRecord, UShort> getIdentity() {
        return Keys.IDENTITY_B2C_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cCategoryRecord> getPrimaryKey() {
        return Keys.KEY_B2C_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cCategoryRecord>>asList(Keys.KEY_B2C_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cCategory as(String alias) {
        return new B2cCategory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cCategory as(Name alias) {
        return new B2cCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cCategory rename(String name) {
        return new B2cCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cCategory rename(Name name) {
        return new B2cCategory(name, null);
    }
}
