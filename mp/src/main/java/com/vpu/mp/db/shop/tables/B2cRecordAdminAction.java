/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables;


import com.vpu.mp.db.shop.Indexes;
import com.vpu.mp.db.shop.Keys;
import com.vpu.mp.db.shop.MiniShop_471752;
import com.vpu.mp.db.shop.tables.records.B2cRecordAdminActionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cRecordAdminAction extends TableImpl<B2cRecordAdminActionRecord> {

    private static final long serialVersionUID = -550383474;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_record_admin_action</code>
     */
    public static final B2cRecordAdminAction B2C_RECORD_ADMIN_ACTION = new B2cRecordAdminAction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cRecordAdminActionRecord> getRecordType() {
        return B2cRecordAdminActionRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.id</code>. ID
     */
    public final TableField<B2cRecordAdminActionRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.shop_id</code>. 店铺ID
     */
    public final TableField<B2cRecordAdminActionRecord, UInteger> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "店铺ID");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.sys_id</code>. 操作员ID
     */
    public final TableField<B2cRecordAdminActionRecord, UInteger> SYS_ID = createField("sys_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "操作员ID");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.account_id</code>. SUB操作员ID
     */
    public final TableField<B2cRecordAdminActionRecord, UInteger> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "SUB操作员ID");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.action_type</code>. 操作类型
     */
    public final TableField<B2cRecordAdminActionRecord, UByte> ACTION_TYPE = createField("action_type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "操作类型");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.action_desc</code>. 操作日志
     */
    public final TableField<B2cRecordAdminActionRecord, String> ACTION_DESC = createField("action_desc", org.jooq.impl.SQLDataType.VARCHAR(3000), this, "操作日志");

    /**
     * The column <code>mini_shop_471752.b2c_record_admin_action.add_time</code>. 添加时间
     */
    public final TableField<B2cRecordAdminActionRecord, Timestamp> ADD_TIME = createField("add_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "添加时间");

    /**
     * Create a <code>mini_shop_471752.b2c_record_admin_action</code> table reference
     */
    public B2cRecordAdminAction() {
        this(DSL.name("b2c_record_admin_action"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_record_admin_action</code> table reference
     */
    public B2cRecordAdminAction(String alias) {
        this(DSL.name(alias), B2C_RECORD_ADMIN_ACTION);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_record_admin_action</code> table reference
     */
    public B2cRecordAdminAction(Name alias) {
        this(alias, B2C_RECORD_ADMIN_ACTION);
    }

    private B2cRecordAdminAction(Name alias, Table<B2cRecordAdminActionRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cRecordAdminAction(Name alias, Table<B2cRecordAdminActionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cRecordAdminAction(Table<O> child, ForeignKey<O, B2cRecordAdminActionRecord> key) {
        super(child, key, B2C_RECORD_ADMIN_ACTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_RECORD_ADMIN_ACTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cRecordAdminActionRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_B2C_RECORD_ADMIN_ACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cRecordAdminActionRecord> getPrimaryKey() {
        return Keys.KEY_B2C_RECORD_ADMIN_ACTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cRecordAdminActionRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cRecordAdminActionRecord>>asList(Keys.KEY_B2C_RECORD_ADMIN_ACTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cRecordAdminAction as(String alias) {
        return new B2cRecordAdminAction(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cRecordAdminAction as(Name alias) {
        return new B2cRecordAdminAction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cRecordAdminAction rename(String name) {
        return new B2cRecordAdminAction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cRecordAdminAction rename(Name name) {
        return new B2cRecordAdminAction(name, null);
    }
}
