/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cBackProcessRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cBackProcess extends TableImpl<B2cBackProcessRecord> {

    private static final long serialVersionUID = -75523538;

    /**
     * The reference instance of <code>mini_main.b2c_back_process</code>
     */
    public static final B2cBackProcess B2C_BACK_PROCESS = new B2cBackProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cBackProcessRecord> getRecordType() {
        return B2cBackProcessRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_back_process.rec_id</code>.
     */
    public final TableField<B2cBackProcessRecord, UInteger> REC_ID = createField("rec_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_back_process.shop_id</code>. 店铺ID
     */
    public final TableField<B2cBackProcessRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "店铺ID");

    /**
     * The column <code>mini_main.b2c_back_process.process_id</code>. 进程ID
     */
    public final TableField<B2cBackProcessRecord, Integer> PROCESS_ID = createField("process_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "进程ID");

    /**
     * The column <code>mini_main.b2c_back_process.job_name</code>. 任务名称
     */
    public final TableField<B2cBackProcessRecord, String> JOB_NAME = createField("job_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务名称");

    /**
     * The column <code>mini_main.b2c_back_process.class_name</code>. 类名称
     */
    public final TableField<B2cBackProcessRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "类名称");

    /**
     * The column <code>mini_main.b2c_back_process.parameters</code>. 任务执行时，所需参数数组,serialize存储
     */
    public final TableField<B2cBackProcessRecord, String> PARAMETERS = createField("parameters", org.jooq.impl.SQLDataType.CLOB, this, "任务执行时，所需参数数组,serialize存储");

    /**
     * The column <code>mini_main.b2c_back_process.state</code>. 进程状态，0初始，1执行中，2完成，3失败
     */
    public final TableField<B2cBackProcessRecord, Byte> STATE = createField("state", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "进程状态，0初始，1执行中，2完成，3失败");

    /**
     * The column <code>mini_main.b2c_back_process.fail_reason</code>. 失败原因
     */
    public final TableField<B2cBackProcessRecord, String> FAIL_REASON = createField("fail_reason", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "失败原因");

    /**
     * The column <code>mini_main.b2c_back_process.only_run_one</code>. 是否只允许一个进程存在，按照class_name，static_method联合查
     */
    public final TableField<B2cBackProcessRecord, Byte> ONLY_RUN_ONE = createField("only_run_one", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否只允许一个进程存在，按照class_name，static_method联合查");

    /**
     * The column <code>mini_main.b2c_back_process.progress</code>. 执行进度
     */
    public final TableField<B2cBackProcessRecord, Short> PROGRESS = createField("progress", org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "执行进度");

    /**
     * The column <code>mini_main.b2c_back_process.progress_info</code>. 当前进度信息
     */
    public final TableField<B2cBackProcessRecord, String> PROGRESS_INFO = createField("progress_info", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "当前进度信息");

    /**
     * The column <code>mini_main.b2c_back_process.end_time</code>. 进程结束时间
     */
    public final TableField<B2cBackProcessRecord, Timestamp> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "进程结束时间");

    /**
     * The column <code>mini_main.b2c_back_process.job_code</code>. 执行结果码，成功0，其他非0
     */
    public final TableField<B2cBackProcessRecord, Integer> JOB_CODE = createField("job_code", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "执行结果码，成功0，其他非0");

    /**
     * The column <code>mini_main.b2c_back_process.job_message</code>. 错误信息
     */
    public final TableField<B2cBackProcessRecord, String> JOB_MESSAGE = createField("job_message", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "错误信息");

    /**
     * The column <code>mini_main.b2c_back_process.job_result</code>. 执行结果,serialize存储
     */
    public final TableField<B2cBackProcessRecord, String> JOB_RESULT = createField("job_result", org.jooq.impl.SQLDataType.CLOB, this, "执行结果,serialize存储");

    /**
     * The column <code>mini_main.b2c_back_process.memo</code>. 备注
     */
    public final TableField<B2cBackProcessRecord, String> MEMO = createField("memo", org.jooq.impl.SQLDataType.CLOB, this, "备注");

    /**
     * The column <code>mini_main.b2c_back_process.created</code>.
     */
    public final TableField<B2cBackProcessRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>mini_main.b2c_back_process</code> table reference
     */
    public B2cBackProcess() {
        this(DSL.name("b2c_back_process"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_back_process</code> table reference
     */
    public B2cBackProcess(String alias) {
        this(DSL.name(alias), B2C_BACK_PROCESS);
    }

    /**
     * Create an aliased <code>mini_main.b2c_back_process</code> table reference
     */
    public B2cBackProcess(Name alias) {
        this(alias, B2C_BACK_PROCESS);
    }

    private B2cBackProcess(Name alias, Table<B2cBackProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cBackProcess(Name alias, Table<B2cBackProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cBackProcess(Table<O> child, ForeignKey<O, B2cBackProcessRecord> key) {
        super(child, key, B2C_BACK_PROCESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_BACK_PROCESS_CREATED, Indexes.B2C_BACK_PROCESS_PRIMARY, Indexes.B2C_BACK_PROCESS_SHOP_CLASS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cBackProcessRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_B2C_BACK_PROCESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cBackProcessRecord> getPrimaryKey() {
        return Keys.KEY_B2C_BACK_PROCESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cBackProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cBackProcessRecord>>asList(Keys.KEY_B2C_BACK_PROCESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cBackProcess as(String alias) {
        return new B2cBackProcess(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cBackProcess as(Name alias) {
        return new B2cBackProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cBackProcess rename(String name) {
        return new B2cBackProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cBackProcess rename(Name name) {
        return new B2cBackProcess(name, null);
    }
}
