/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.shop.tables;


import com.vpu.mp.db.shop.Indexes;
import com.vpu.mp.db.shop.Keys;
import com.vpu.mp.db.shop.MiniShop_1;
import com.vpu.mp.db.shop.tables.records.RequestRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestRecord extends TableImpl<RequestRecordRecord> {

    private static final long serialVersionUID = -930815682;

    /**
     * The reference instance of <code>mini_shop_1.b2c_request_record</code>
     */
    public static final RequestRecord REQUEST_RECORD = new RequestRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestRecordRecord> getRecordType() {
        return RequestRecordRecord.class;
    }

    /**
     * The column <code>mini_shop_1.b2c_request_record.id</code>.
     */
    public final TableField<RequestRecordRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_1.b2c_request_record.service_action</code>. 服务类型 1 POS 2 CRM
     */
    public final TableField<RequestRecordRecord, Byte> SERVICE_ACTION = createField("service_action", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "服务类型 1 POS 2 CRM");

    /**
     * The column <code>mini_shop_1.b2c_request_record.service_interface</code>. 服务接口
     */
    public final TableField<RequestRecordRecord, String> SERVICE_INTERFACE = createField("service_interface", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "服务接口");

    /**
     * The column <code>mini_shop_1.b2c_request_record.request_content</code>. 请求内容
     */
    public final TableField<RequestRecordRecord, String> REQUEST_CONTENT = createField("request_content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "请求内容");

    /**
     * The column <code>mini_shop_1.b2c_request_record.response_code</code>. 响应码
     */
    public final TableField<RequestRecordRecord, String> RESPONSE_CODE = createField("response_code", org.jooq.impl.SQLDataType.VARCHAR(10), this, "响应码");

    /**
     * The column <code>mini_shop_1.b2c_request_record.response_msg</code>. 响应码对照
     */
    public final TableField<RequestRecordRecord, String> RESPONSE_MSG = createField("response_msg", org.jooq.impl.SQLDataType.VARCHAR(100), this, "响应码对照");

    /**
     * The column <code>mini_shop_1.b2c_request_record.response_content</code>. 响应内容
     */
    public final TableField<RequestRecordRecord, String> RESPONSE_CONTENT = createField("response_content", org.jooq.impl.SQLDataType.CLOB, this, "响应内容");

    /**
     * The column <code>mini_shop_1.b2c_request_record.request_time</code>. 请求时间
     */
    public final TableField<RequestRecordRecord, Timestamp> REQUEST_TIME = createField("request_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "请求时间");

    /**
     * The column <code>mini_shop_1.b2c_request_record.response_time</code>. 响应时间
     */
    public final TableField<RequestRecordRecord, Timestamp> RESPONSE_TIME = createField("response_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "响应时间");

    /**
     * The column <code>mini_shop_1.b2c_request_record.error_is_deal</code>. 错误是否已处理
     */
    public final TableField<RequestRecordRecord, Byte> ERROR_IS_DEAL = createField("error_is_deal", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "错误是否已处理");

    /**
     * Create a <code>mini_shop_1.b2c_request_record</code> table reference
     */
    public RequestRecord() {
        this(DSL.name("b2c_request_record"), null);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_request_record</code> table reference
     */
    public RequestRecord(String alias) {
        this(DSL.name(alias), REQUEST_RECORD);
    }

    /**
     * Create an aliased <code>mini_shop_1.b2c_request_record</code> table reference
     */
    public RequestRecord(Name alias) {
        this(alias, REQUEST_RECORD);
    }

    private RequestRecord(Name alias, Table<RequestRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private RequestRecord(Name alias, Table<RequestRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RequestRecord(Table<O> child, ForeignKey<O, RequestRecordRecord> key) {
        super(child, key, REQUEST_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_1.MINI_SHOP_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REQUEST_RECORD_PRIMARY, Indexes.REQUEST_RECORD_SERVICE_ACTION, Indexes.REQUEST_RECORD_SERVICE_INTERFACE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RequestRecordRecord, Long> getIdentity() {
        return Keys.IDENTITY_REQUEST_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RequestRecordRecord> getPrimaryKey() {
        return Keys.KEY_B2C_REQUEST_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RequestRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestRecordRecord>>asList(Keys.KEY_B2C_REQUEST_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequestRecord as(String alias) {
        return new RequestRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequestRecord as(Name alias) {
        return new RequestRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestRecord rename(String name) {
        return new RequestRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestRecord rename(Name name) {
        return new RequestRecord(name, null);
    }
}
