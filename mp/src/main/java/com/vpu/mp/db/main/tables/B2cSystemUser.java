/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cSystemUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cSystemUser extends TableImpl<B2cSystemUserRecord> {

    private static final long serialVersionUID = 1375026986;

    /**
     * The reference instance of <code>mini_main.b2c_system_user</code>
     */
    public static final B2cSystemUser B2C_SYSTEM_USER = new B2cSystemUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cSystemUserRecord> getRecordType() {
        return B2cSystemUserRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_system_user.system_user_id</code>.
     */
    public final TableField<B2cSystemUserRecord, UInteger> SYSTEM_USER_ID = createField("system_user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_system_user.user_name</code>.
     */
    public final TableField<B2cSystemUserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_system_user.password</code>.
     */
    public final TableField<B2cSystemUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_system_user.mobile</code>.
     */
    public final TableField<B2cSystemUserRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_system_user.receive_mobile</code>.  接收通知手机号码
     */
    public final TableField<B2cSystemUserRecord, String> RECEIVE_MOBILE = createField("receive_mobile", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, " 接收通知手机号码");

    /**
     * The column <code>mini_main.b2c_system_user.created</code>. 创建时间
     */
    public final TableField<B2cSystemUserRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>mini_main.b2c_system_user.is_enabled</code>. 是否可用
     */
    public final TableField<B2cSystemUserRecord, Byte> IS_ENABLED = createField("is_enabled", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "是否可用");

    /**
     * The column <code>mini_main.b2c_system_user.last_login_ip</code>. 上次登录IP
     */
    public final TableField<B2cSystemUserRecord, String> LAST_LOGIN_IP = createField("last_login_ip", org.jooq.impl.SQLDataType.VARCHAR(40).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "上次登录IP");

    /**
     * Create a <code>mini_main.b2c_system_user</code> table reference
     */
    public B2cSystemUser() {
        this(DSL.name("b2c_system_user"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_system_user</code> table reference
     */
    public B2cSystemUser(String alias) {
        this(DSL.name(alias), B2C_SYSTEM_USER);
    }

    /**
     * Create an aliased <code>mini_main.b2c_system_user</code> table reference
     */
    public B2cSystemUser(Name alias) {
        this(alias, B2C_SYSTEM_USER);
    }

    private B2cSystemUser(Name alias, Table<B2cSystemUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cSystemUser(Name alias, Table<B2cSystemUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cSystemUser(Table<O> child, ForeignKey<O, B2cSystemUserRecord> key) {
        super(child, key, B2C_SYSTEM_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_SYSTEM_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cSystemUserRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_B2C_SYSTEM_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cSystemUserRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SYSTEM_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cSystemUserRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cSystemUserRecord>>asList(Keys.KEY_B2C_SYSTEM_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cSystemUser as(String alias) {
        return new B2cSystemUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cSystemUser as(Name alias) {
        return new B2cSystemUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cSystemUser rename(String name) {
        return new B2cSystemUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cSystemUser rename(Name name) {
        return new B2cSystemUser(name, null);
    }
}
