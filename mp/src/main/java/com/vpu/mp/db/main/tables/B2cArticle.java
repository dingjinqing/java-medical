/*
 * This file is generated by jOOQ.
 */
package com.vpu.mp.db.main.tables;


import com.vpu.mp.db.main.Indexes;
import com.vpu.mp.db.main.Keys;
import com.vpu.mp.db.main.MiniMain;
import com.vpu.mp.db.main.tables.records.B2cArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class B2cArticle extends TableImpl<B2cArticleRecord> {

    private static final long serialVersionUID = -1001552061;

    /**
     * The reference instance of <code>mini_main.b2c_article</code>
     */
    public static final B2cArticle B2C_ARTICLE = new B2cArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<B2cArticleRecord> getRecordType() {
        return B2cArticleRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_article.article_id</code>.
     */
    public final TableField<B2cArticleRecord, Integer> ARTICLE_ID = createField("article_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_article.category_id</code>. 文章分类
     */
    public final TableField<B2cArticleRecord, Integer> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "文章分类");

    /**
     * The column <code>mini_main.b2c_article.title</code>.
     */
    public final TableField<B2cArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>mini_main.b2c_article.author</code>.
     */
    public final TableField<B2cArticleRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>mini_main.b2c_article.keyword</code>. 标签
     */
    public final TableField<B2cArticleRecord, String> KEYWORD = createField("keyword", org.jooq.impl.SQLDataType.VARCHAR(256), this, "标签");

    /**
     * The column <code>mini_main.b2c_article.desc</code>. 文章描述
     */
    public final TableField<B2cArticleRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "文章描述");

    /**
     * The column <code>mini_main.b2c_article.content</code>.
     */
    public final TableField<B2cArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>mini_main.b2c_article.is_recommend</code>. 1:推荐
     */
    public final TableField<B2cArticleRecord, Byte> IS_RECOMMEND = createField("is_recommend", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "1:推荐");

    /**
     * The column <code>mini_main.b2c_article.is_top</code>. 1:置顶
     */
    public final TableField<B2cArticleRecord, Byte> IS_TOP = createField("is_top", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "1:置顶");

    /**
     * The column <code>mini_main.b2c_article.status</code>. 0未发布,1已发布
     */
    public final TableField<B2cArticleRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0未发布,1已发布");

    /**
     * The column <code>mini_main.b2c_article.pub_time</code>. 发布时间
     */
    public final TableField<B2cArticleRecord, Timestamp> PUB_TIME = createField("pub_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "发布时间");

    /**
     * The column <code>mini_main.b2c_article.update_time</code>. 更新时间
     */
    public final TableField<B2cArticleRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>mini_main.b2c_article.create_time</code>.
     */
    public final TableField<B2cArticleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_main.b2c_article.last_visit_time</code>.
     */
    public final TableField<B2cArticleRecord, Timestamp> LAST_VISIT_TIME = createField("last_visit_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mini_main.b2c_article.pv</code>.
     */
    public final TableField<B2cArticleRecord, Integer> PV = createField("pv", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mini_main.b2c_article.show_footer</code>. 0:不在footer显示，1：显示
     */
    public final TableField<B2cArticleRecord, Byte> SHOW_FOOTER = createField("show_footer", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:不在footer显示，1：显示");

    /**
     * The column <code>mini_main.b2c_article.head_pic</code>. 头图
     */
    public final TableField<B2cArticleRecord, String> HEAD_PIC = createField("head_pic", org.jooq.impl.SQLDataType.VARCHAR(191), this, "头图");

    /**
     * Create a <code>mini_main.b2c_article</code> table reference
     */
    public B2cArticle() {
        this(DSL.name("b2c_article"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_article</code> table reference
     */
    public B2cArticle(String alias) {
        this(DSL.name(alias), B2C_ARTICLE);
    }

    /**
     * Create an aliased <code>mini_main.b2c_article</code> table reference
     */
    public B2cArticle(Name alias) {
        this(alias, B2C_ARTICLE);
    }

    private B2cArticle(Name alias, Table<B2cArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private B2cArticle(Name alias, Table<B2cArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> B2cArticle(Table<O> child, ForeignKey<O, B2cArticleRecord> key) {
        super(child, key, B2C_ARTICLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.B2C_ARTICLE_IS_RECOMMEND, Indexes.B2C_ARTICLE_IS_TOP, Indexes.B2C_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<B2cArticleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_B2C_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<B2cArticleRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<B2cArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<B2cArticleRecord>>asList(Keys.KEY_B2C_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cArticle as(String alias) {
        return new B2cArticle(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public B2cArticle as(Name alias) {
        return new B2cArticle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cArticle rename(String name) {
        return new B2cArticle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public B2cArticle rename(Name name) {
        return new B2cArticle(name, null);
    }
}
